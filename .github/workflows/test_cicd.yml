name: deployment-dev
on:
  push:
   branches:
    - develop
    - cicd-qa
    - cicd-sit
    - cicd-prod
jobs:
  deployment:
    name: build-and-deploy-project
    runs-on: ubuntu-latest
    environment: |-
      ${{
         github.ref_name == 'develop' && 'DEV'
      || github.ref_name == 'cicd-qa' && 'QA'
      || github.ref_name == 'cicd-sit' && 'SIT'
      || github.ref_name == 'cicd-prod' && 'PROD'
      }}
    outputs:
      version_number: ${{ env.version }}
    permissions:
      contents: write
      
    steps:
    
    - name: checkout
      uses: actions/checkout@v4.1.0
    # - name: maven version
    #   run: |
    #     mvn --version
    # - name: Installxmllint
    #   run: |
    #     sudo apt-get install -y libxml2-utils
    # - name: ExtractversionfromXML
    #   id: app_version
    #   run: |
    #     VERSION=$(xmllint --xpath "string(//*[local-name()='project']/*[local-name()='version'])" pom.xml)
    #     echo "Extracted version: $VERSION"
    #     echo "version=$VERSION" >> $GITHUB_ENV

    - run: echo "version=1.0.0" >> $GITHUB_ENV
    
    - name: Replaceenvironmentvariablesinfile
      run: |
          echo "Replacing API_URL in config.json"
          sed -i 's#\${API_URL}#'"${{ vars.API_URL }}"'#g' config.json
          
    - name: Showupdatedconfig
      run: cat config.json
      
    - name: build-package
      run: |
        mkdir target
        echo 'not a real jar' > target/cicd-testing-v1-${{ env.version }}-mule-application.jar
        echo "Extracted version: $VERSION"
        echo "new...."
        echo "The version extracted from XML is ${{ env.version }}"
        mkdir staging
        cp target/*.jar staging

    # - name: deploy-to-dev
    #   run: |
    #     ls target/
    #     echo 'Deployment to DEV is successful!'
    
    - name: get-pr-information
      uses: 8BitJonny/gh-get-current-pr@3.0.0
      id: PR      

    # - name: 'Get semver based on pr label'
    #   id: semver1
    #   uses: "snsinahub-org/semver@v3.0.0"
    #   with:
    #     type: "${{ steps.PR.outputs.pr_labels }}"
    #     prefix: '' 
    #     body: "${{ steps.PR.outputs.pr_body }}"  
    #     create-release: 'yes'
    #     prerelease: 'no'
    #     exit-on-missing-type: 'no'
    #     files: |
    #         target/cicd-testing-v1-${{ env.version }}-mule-application.jar
    # - name: 'print version'
    #   run: |
    #     echo ${{ steps.semver1.outputs.version }}

    # - name: create-release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     release_name: Release v1.0.0
    #     body: |
    #       ${{ steps.PR.outputs.pr_body }}
    #     tag_name: ${{ github.ref }}
    #     draft: false
    #     prerelease: false
    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} 
    #     asset_path: target/*.jar
    
    # - name: AuthenticatewithGitHubCLI
    #   env:
    #     GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    #     GH_TOKEN: ${{ github.token }}
    #   run: |
    #       gh auth login --with-token
    #       gh auth status

    - name: grep-exchange-url-1
      id: extract_strings
      run: |
        STRINGS=$(grep -oP '\[INFO\] ------< \K[^:]+|(?<=:)[^ >]+' deploy_result.txt  | head -n 2)
        STRING1=$(echo "$STRINGS" | sed -n '1p')
        STRING2=$(echo "$STRINGS" | sed -n '2p')
        echo "Extracted STRING1: $STRING1"
        echo "Extracted STRING2: $STRING2"
        echo "STRING1=$STRING1" >> $GITHUB_ENV
        echo "STRING2=$STRING2" >> $GITHUB_ENV
        echo "MADEURL=https://anypoint.mulesoft.com/exchange/$STRING1/$STRING2/${{ env.version }}" >> $GITHUB_ENV

    - name: grep-exchange-url-2
      id: extract_url 
      run: |
        URL=$(grep -A 1 "Your asset has been successfully published" deploy_result.txt | grep -oP '(https?://[^\s]+)')
        echo "Extracted URL: $URL"
        echo "EXCHANGEURL=$URL" >> $GITHUB_ENV

    - name: init-pr-note
      run: |
        mkdir pr_info
        echo "${{ steps.PR.outputs.pr_body }}" | tee pr_info/pr_body.md
        echo -e "\n# Exchange URL1:\n${{ env.EXCHANGEURL }}\n" >> pr_info/pr_body.md
        echo -e "\n# Exchange URL2:\n${{ env.MADEURL }}\n" >> pr_info/pr_body.md
        
        
    - name: Create-release-${{github.ref_name}}- ${{ env.ENVIRONMENT }}
      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        GITHUB_REF_NAME: ${{ github.ref_name }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo v${{ env.version }}
          gh release create ${{ env.version }} ./target/*.jar --title "${{ env.version }}" --notes-file pr_info/pr_body.md
#          gh release create ${{ env.version }} ./target/*.jar --title "${{ env.version }}" --notes "${{ steps.PR.outputs.pr_body }}"    
#          gh release create ${{ env.version }} ./target/cicd-testing-v1-${{ env.version }}-mule-application.jar --title "Init Release" --generate-notes
        
    # - name: Generate Changelog
    #   run: |
    #     mkdir temp
    #     echo "${{ steps.PR.outputs.pr_body }}" > temp/CHANGELOG.txt
    # - name: Release
    #   uses: softprops/action-gh-release@v2
    #   with:
    #     body_path: temp/CHANGELOG.txt
    #     files: ./target/cicd-testing-v1-${{ env.version }}-mule-application.jar
    #     name: v${{ env.version }}
    #     tag_name: ${{ github.ref_name }}

  # release:
  #   runs-on: ubuntu-latest
  #   if: ${{ vars.ENV == 'DEV' }}
  #   needs: deployment
  #   environment: DEV
  #   steps:
  #     - name: init-release
  #       if: ${{ vars.ENV == 'DEV' }}
  #       run: echo 'Release ${{ needs.deployment.outputs.version_number }} to ${{ vars.ENV }} is successful!'

  # release:
  #   needs: deployment
  #   uses: ./.github/workflows/cicd-release.yml
  #   with:
  #     environment: DEV
  #     release: ${{ needs.deployment.outputs.version_number }}
  #   permissions:
  #     contents: write    
