name: deployment-dev
on:
  push:
   branches:
    - develop
    - cicd-qa
    - cicd-sit
    - cicd-prod
jobs:
  deployment:
    name: build-and-deploy-project
    runs-on: ubuntu-latest
    environment: |-
      ${{
         github.ref_name == 'develop' && 'DEV'
      || github.ref_name == 'cicd-qa' && 'QA'
      || github.ref_name == 'cicd-sit' && 'SIT'
      || github.ref_name == 'cicd-prod' && 'PROD'
      }}
    outputs:
      version_number: ${{ env.version }}
    
    steps:
    
    - name: checkout
      uses: actions/checkout@v4.1.0
    # - name: maven version
    #   run: |
    #     mvn --version
    # - name: Installxmllint
    #   run: |
    #     sudo apt-get install -y libxml2-utils
    # - name: ExtractversionfromXML
    #   id: app_version
    #   run: |
    #     VERSION=$(xmllint --xpath "string(//*[local-name()='project']/*[local-name()='version'])" pom.xml)
    #     echo "Extracted version: $VERSION"
    #     echo "version=$VERSION" >> $GITHUB_ENV
    - name: Replaceenvironmentvariablesinfile
      run: |
          echo "Replacing API_URL in config.json"
          sed -i 's#\${API_URL}#'"${{ vars.API_URL }}"'#g' config.json
          
    - name: Showupdatedconfig
      run: cat config.json
      
    - name: build-package
      run: |
        mkdir target
        echo 'not a real jar' > target/cicd-testing-v1-${{ env.version }}-mule-application.jar
        echo "Extracted version: $VERSION"
        echo "new...."
        echo "The version extracted from XML is ${{ env.version }}"
    - name: deploy-to-dev
      run: |
        ls target/
        echo 'Deployment to DEV is successful!'
    - name: get-pr-information
      uses: 8BitJonny/gh-get-current-pr@2.2.0
      id: PR      
    # - name: 'Get semver based on pr label'
    #   id: semver1
    #   uses: "snsinahub-org/semver@v3.0.0"
    #   with:
    #     type: "${{ steps.PR.outputs.pr_labels }}"
    #     prefix: '' 
    #     body: ${{ steps.PR.outputs.pr_body }}  
    #     create-release: 'yes'
    #     prerelease: 'no'
    #     exit-on-missing-type: 'no'
    #     files: |
    #         target/*.jar
    # - name: 'print version'
    #   run: |
    #     echo ${{ steps.semver1.outputs.version }}
    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_name: Release v1.0.0
        body: |
          ${{ steps.PR.outputs.pr_body }}
        tag_name: ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: target/*.jar

  release:
    runs-on: ubuntu-latest
    if: ${{ vars.ENV == 'DEV' }}
    needs: deployment
    environment: DEV
    steps:
      - name: init-release
        if: ${{ vars.ENV == 'DEV' }}
        run: echo 'Release ${{ needs.deployment.outputs.version_number }} to ${{ vars.ENV }} is successful!'
        
